每个库都有一个在groupid下的唯一libid，由一个字符串表示
name或libid为groupid.artifactid，groupid可以为空，空的groupid其中name直接以artifactid为表示，libid要求唯一
package的名字也要求唯一，通常应当和库名一致



InstallEntryTable每个条目具有以下属性:
libid, 
name, version, compiler, platform, arch, build_type, other_keys
install_path, include_path, lib_path, bin_path, cmake_path, 
lib_list
dll_list
dependent
dependency
install_state
other


id为主键
(name, version, compiler, platform, arch, build_type, other_keys)具有唯一约束
libid为库的唯一ID
version为版本号，如果没有版本号，则用发布日期，以"年.月.日"的格式表示
platform为平台，如果为任意平台，则用""表示
arch为架构，如果为任意架构，则用""表示
compiler为编译器名，如果为任意，则用""表示
build_type为构建类型，如果为任意类型，则用""表示
other_keys为包裹自定义keys，默认为""

install_path用于在package未提供卸载方法时卸载整个版本的lib
lib_list为安装的静态库文件名列表，如果有依赖关系，则左边应当依赖右边
dll_list为安装的动态库文件名列表
dependent以list存储，其中保存的是使用被依赖的id
dependency保存使用依赖库的libid
install_state记录安装状态，包括complete, damage, installing, uninstalling，fail_install，fail_uninstall
依赖只记录使用依赖，而不记录构建依赖


配置文件用json


依赖处理机制:
安装时更新dependency_table，以及install_info_table中每个dependency条目的dependent
卸载时若存在dependent，检测是否存在其他新版本可以替代该依赖，并给出警告信息
如果用户决定用新版本替代，则更新install_info_table对应的dependent

库更新机制:
更新时卸载旧版本时要处理依赖，若新版本可以替代原依赖，则进行替代

库安装:
安装会先检测是否已经安装，若已安装则直接跳过
每个版本的库都会安装到单独的目录


查询机制:
可以给出使用库所有必要的信息

异步下载安装:
构造安装依赖DAG，根据拓扑排序后的顺序进行下载
保存入度为0的节点集合
获取成功下载项，
检测是否属于当前入度为0的点，如果是则安装自身
如果不属于入读为0的点，则将自身加入待安装集合
如果安装失败，则尝试修复并同步安装，修复失败则安装失败
如果安装成功，则将自身移出DAG，更新所有的被依赖项的入度以及DAG
更新后如果入度为0并且属于已下载的集合，则递归安装
结束后挂起直到下一个下载项完成
其中若发生下载失败则进行同步下载尝试修复，若修复失败，则安装失败


模块
core: 核心模块，包含host, installer, config, manager
db: 数据库模块
ext: 扩展模块，为C++构建程序如cmake提供辅助



安装目录组织:
fxpkg.py    主程序
installed   库安装目录
- groupids
-- artifactIds    
--- version
---- compiler
------ platforms   
------- archs     
--------- include
--------- lib
--------- bin
---------- cmake

data        保存的数据
-host       本体数据
-package  安装器保存的数据
--groupids
---artifactIds
package   包裹
-groupids
config      配置
-config.json   默认配置
-host       本体配置，包括一些默认值
-package
--groupids
---artifactIds
log         日志
-host       本体日志
-package    包裹日志
--groupids
---artifactIds
cache       缓存
-host       本体缓存
-package
--tmp        临时缓存，程序结束后自动清除
---groupids
----artifactIds
--download   下载缓存，手动清除
---groupids
----packageids
--build      构建缓存，手动清除
---groupids
----packageids



